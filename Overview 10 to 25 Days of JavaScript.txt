Overview: 10 to 25 Days of JavaScript


This series focuses on learning and practicing JavaScript. Each challenge comes with a tutorial article, and you can view these articles by clicking either the Topics tab along the top or the article icon in the right-hand menu.

Objective

In this challenge, we review some basic concepts that will get you started with this series. Check out the tutorial to learn more about JavaScript's lexical structure.

Task

A greeting function is provided for you in the editor below. It has one parameter,parameterVariable . Perform the following tasks to complete this challenge:

Use console.log() to print Hello, World! on a new line in the console, which is also known as stdout or standard output. The code for this portion of the task is already provided in the editor.
Use console.log(parameterVariable) to print the contents of  (i.e., the argument passed to main).
You've got this!

Input Format


Data Type
String

Parameter 
parameterVariable 

Description
A single line of text containing one or more space-separated words.

Output Format

Print the following two lines of output:

On the first line, print Hello, World! (this is provided for you in the editor).
On the second line, print the contents of .
Sample Input 0

Welcome to 10 Days of JavaScript!
Sample Output 0

Hello, World!
Welcome to 10 Days of JavaScript!


Explanation 0

We printed two lines of output:

1. We printed the literal string Hello, World! using the code provided in the editor.
2. The value of parameterVariable passed to our main function in this Sample Case was Welcome to 10 Days of JavaScript!. We then passed our variable to console.log, which printed the contents ofparameterVariable .


GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   A line of code that prints "Hello, World!" on a new line is provided in the editor. 
*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.
*
*	Parameter:
*   parameterVariable - A string of text.
**/
function greeting(parameterVariable) {
    // This line prints 'Hello, World!' to the console:
    console.log('Hello, World!');

    // Write a line of code that prints parameterVariable to stdout using console.log:
    
}


SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   A line of code that prints "Hello, World!" on a new line is provided in the editor. 
*   Write a second line of code that prints the contents of 'parameterVariable' on a new line.
*
*	Parameter:
*   parameterVariable - A string of text.
**/
    // Write a line of code that prints parameterVariable to stdout using console.log:
function greeting(parameterVariable) {
    // This line prints 'Hello, World!' to the console:
    console.log('Hello, World!');

    // Write a line of code that prints parameterVariable to stdout using console.log:
    console.log(parameterVariable);    

}


Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
Welcome to 10 Days of JavaScript!
Your Output (stdout)
Hello, World!
Welcome to 10 Days of JavaScript!
Expected Output
Hello, World!
Welcome to 10 Days of JavaScript!


**********************************************************

Day 0: Data Types


Objective

Today, we're discussing data types. Check out the attached tutorial for more details.

Task

Variables named ,firstInteger , firstDecimal and firstString are declared for you in the editor below. You must use the  operator to perform the following sequence of operations:

1. Convert secondInteger to an integer (Number type), then sum it with  firstInteger and print the result on a new line using console.log.
2. Convert secondDecimal to a floating-point number (Number type), then sum it with firstDecimal and print the result on a new line using console.log.
3. Print the concatenation of firstString and secondString on a new line using console.log. Note that firstString must be printed first.
Input Format

Data Type		         
string

Parameter
secondInteger

 Description
The string representation of an integer you must sum with firstInteger .

Data Type		         
string

Parameter
secondDecimal

 Description
The string representation of a floating-point number you must sum with firstDecimal.


Data Type		         
string


Parameter
secondString


Description
A string of one or more space-separated words you must append to secondString.

Output Format

Print the following three lines of output:

1. On the first line, print the sum of first Integer and the integer representation of secondInteger.
2. On the second line, print the sum of firstDecimal and the floating-point representation of secondDecimal.
3. On the third line, print firstString concatenated with secondString. You must print firstString before secondString.

Sample Input 0

12
4.32
is the best place to learn and practice coding!
Sample Output 0

16
8.32
HackerRank is the best place to learn and practice coding!
Explanation 0

When we sum the integers 4 and 12, we get the integer 16.
When we sum the floating-point numbers 4.0 and 4.32, we get 8.32. When we concatenate HackerRank with is the best place to learn and practice coding!, we get HackerRank is the best place to learn and practice coding!.

You will not pass this challenge if you attempt to assign the Sample Case values to your variables instead of following the instructions above.



GIVEN CODE
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}
/**
*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.
*   Print three lines:
*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.
*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.
*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).
*
*	Parameter(s):
*   secondInteger - The string representation of an integer.
*   secondDecimal - The string representation of a floating-point number.
*   secondString - A string consisting of one or more space-separated words.
**/
function performOperation(secondInteger, secondDecimal, secondString) {
    // Declare a variable named 'firstInteger' and initialize with integer value 4.
    const firstInteger = 4;
    
    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.
    const firstDecimal = 4.0;
    
    // Declare a variable named 'firstString' and initialize with the string "HackerRank".
    const firstString = 'HackerRank ';
    
    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.
    
    
    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.
    
    
    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.
    
}


SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.
*   Print three lines:
*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.
*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.
*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).
*
*    Parameter(s):
*   secondInteger - The string representation of an integer.
*   secondDecimal - The string representation of a floating-point number.
*   secondString - A string consisting of one or more space-separated words.
**/
function performOperation(secondInteger, secondDecimal, secondString) {
    // Declare a variable named 'firstInteger' and initialize with integer value 4.
    const firstInteger = 4;
    
    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.
    const firstDecimal = 4.0;
    
    // Declare a variable named 'firstString' and initialize with the string "HackerRank".
    const firstString = 'HackerRank ';
    
 // Convert 'secondInteger' to a Number type and print the sum of 'firstInteger' and 'secondInteger'.
    console.log(firstInteger + parseInt(secondInteger, 10));
    
    // Convert 'secondDecimal' to a Number type and print the sum of 'firstDecimal' and 'secondDecimal'.
    console.log(firstDecimal + parseFloat(secondDecimal));
    
    // Concatenate 'firstString' and 'secondString' and print the result.
    console.log(firstString + secondString);
}

function main() {
    const secondInteger = readLine();
    const secondDecimal = readLine();
    const secondString = readLine();
    
    performOperation(secondInteger, secondDecimal, secondString);
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
12
4.32
is the best place to learn and practice coding!
Your Output (stdout)
16
8.32
HackerRank is the best place to learn and practice coding!
Expected Output
16
8.32
HackerRank is the best place to learn and practice coding!


**************************************************************

Day 2: Loops


Objective

In this challenge, we practice looping over the characters of string. Check out the attached tutorial for more details.

Task

1. First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and each vowel must be printed in the same order as it appeared in s .
2. Second, print each consonant (i.e., non-vowel) in s on a new line in the same order as it appeared in s.
Function Description

Complete the vowelsAndConsonants function in the editor below.

vowelsAndConsonants has the following parameters:

string s: the string to process
Prints

Print each vowel of s in order on a new line, then print each consonant in order on a new line. Return nothing.
Input Format

There is one line of input with the string s.

Output Format

First, print each vowel in s on a new line (in the same order as they appeared in s). Second, print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared in s).


Sample Input 0

javascriptloops
Sample Output 0

a
a
i
o
o
j
v
s
c
r
p
t
l
p
s
Explanation 0

Observe the following:

Each letter is printed on a new line.
Then the vowels are printed in the same order as they appeared in s.
Then the consonants are printed in the same order as they appeared in s.


GIVEN CODE
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the vowelsAndConsonants function.
 * Print your output using 'console.log()'.
 */
function vowelsAndConsonants(s) {
    
}


/*
 * Complete the vowelsAndConsonants function.
 * Print your output using 'console.log()'.
 */
function vowelsAndConsonants(s) {
    
}


function main() {
    const s = readLine();
    
    vowelsAndConsonants(s);
}

SOLUTION 


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the vowelsAndConsonants function.
 * Print your output using 'console.log()'.
 */
function vowelsAndConsonants(s) {
   const vowels = ['a', 'e', 'i', 'o', 'u'];

    // Print vowels
    for (const char of s) {
        if (vowels.includes(char)) {
            console.log(char);
        }
    }

    // Print consonants
    for (const char of s) {
        if (!vowels.includes(char)) {
            console.log(char);
        }
    } 
}


function main() {
    const s = readLine();
    
    vowelsAndConsonants(s);
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
javascriptloops
Your Output (stdout)
a
a
i
o
o
j
v
s
c
r
p
t
l
p
s
Expected Output
a
a
i
o
o
j
v
s
c
r
p
t
l
p
s

**************************************************************

Day 7: Regular Expressions I


Objective

In this challenge, we use a Regular Expression to evaluate a string. Check out the attached tutorial for more details.

Task

Complete the function in the editor below by returning a RegExp object, re, that matches any string s that begins and ends with the same vowel. Recall that the English vowels are a, e, i, o, and u.

Constraints

The length of string s is >=3 .
String s consists of lowercase letters only (i.e., [a-z]).
Output Format

The function must return a RegExp object that matches any string  beginning with and ending in the same vowel.

Sample Input 0

bcd

Sample Output 0

false
Explanation 0

This string starts with (and ends in) a consonant, so it cannot start and end with the same vowel.

Sample Input 1

abcd
Sample Output 1

false
Explanation 1

This string ends in a consonant, so it cannot start and end with the same vowel.

Sample Input 2

abcda


Sample Output 2

true
Explanation 2

This string starts and ends with the same vowel (a).

Sample Input 3

abcdo
Sample Output 3

false
Explanation 3

This string starts with the vowel a but ends in the vowel o.


GIVEN CODE 
'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function regexVar() {
    /*
     * Declare a RegExp object variable named 're'
     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})
     */
    
    
    /*
     * Do not remove the return statement
     */
    return re;
}


function main() {
    const re = regexVar();
    const s = readLine();
    
    console.log(re.test(s));
}




SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function regexVar() {
    /*
     * Declare a RegExp object variable named 're'
     * It must match a string that starts and ends with the same vowel (i.e., {a, e, i, o, u})
     */
    
        const re = /^([aeiou]).*\1$/;
    /*
     * Do not remove the return statement
     */
    return re;
}


function main() {
    const re = regexVar();
    const s = readLine();
    
    console.log(re.test(s));
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0

Sample Test case 1

Sample Test case 2

Sample Test case 3
Input (stdin)
bcd
Your Output (stdout)
false
Expected Output
false

**************************************************************

Day 3: Try, Catch, and Finally


Objective

In this challenge, we learn about strings and exceptions. Check out the attached tutorials for more details.

Task

Complete the reverseString function; it has one parameter,s . You must perform the following actions:

1. Try to reverse string s using the split, reverse, and join methods.
2. If an exception is thrown, catch it and print the contents of the exception's message on a new line.
3. Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string.
Input Format

Locked stub code in the editor reads variable  from stdin and passes it to the function.


Output Format

You must write two print statements using console.log():

1. Print the contents of a caught exception's message on a new line. If no exception was thrown, this line should not be printed.
2. Print s on a new line. If no exception was thrown, then this should be the reversed string; if an exception was thrown, this should be the original string.
Sample Input 0


"1234"
Sample Output 0

4321
Explanation 0

s = "1234" is a string type, so it can be reversed without throwing an exception. Thus, we print the reversed value, 4321, as our answer.

Sample Input 1

Number(1234)
Sample Output 1

s.split is not a function
1234

Explanation 1

s = Number(1234) is not a string type, so it can't be reversed using string functions. When we try to reverse it anyway, it throws an exception. We then catch the exception and print its message, which is s.split is not a function. Next, we finally print  which, because it wasn't able to be reversed, is Number(1234).



GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the reverseString function
 * Use console.log() to print to stdout.
 */
function reverseString(s) {
    
}


function main() {
    const s = eval(readLine());
    
    reverseString(s);
}


Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0

Sample Test case 1
Input (stdin)
"1234"
Your Output (stdout)
4321
Expected Output
4321

**********************************************************


Day 3: Throw


Objective

In this challenge, we practice using throw and catch statements to work with custom error messages.

Task

Complete the isPositive function below. It has one integer parameter,a . If the value of a is positive, it must return the string YES. Otherwise, it must throw an Error according to the following rules:

If a is 0, throw an Error with message= Zero Error.
If  is negative, throw an Error with message= Negative Error.


Input Format

Locked stub code in the editor reads the following input from stdin and passes each value of a to the function as an argument:
The first line is an integer,n , denoting the number of times the function will be called with some a.
Each line i of the n subsequent lines contains an integer denoting some a.

Constraints

1<=n<=5
-100<=a<=100

Output Format


If the value of a is positive, the function must return the string YES. Otherwise, it must throw an Error according to the following rules:

If a is 0 , throw an Error with message = Zero Error.
If a is negative, throw an Error with message = Negative Error.
Sample Input 0

3
1
2
3
Sample Output 0

YES
YES
YES
Explanation 0

Each of the given values is positive, so we return YES each time. The value returned during each function call is printed on a new line by locked stub code in the editor.

Sample Input 1


3
2
0
6
Sample Output 1

YES
Zero Error
YES
Explanation 1

Locked stub code in the editor makes the following three calls to the isPositive function:

1. isPositive(2): This returns YES because 2 is positive.
2. isPositive(0): Because a = 0, we throw an Error with message = Zero Error. This is caught by the locked stub code and the value of its  is printed.
3. isPositive(6): This returns YES because 6 is positive.
Sample Input 2

2
-1
20
Sample Output 2

Negative Error
YES
Explanation 2

Locked stub code in the editor makes the following two calls to the isPositive function:

1. isPositive(-1): Because a = -1 , we throw an Error with message = Negative Error. This is caught by the locked stub code and the value of its message is printed.
2. isPositive(20): This returns YES because 20 is positive.



GIVEN CODE


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}


/*
 * Complete the isPositive function.
 * If 'a' is positive, return "YES".
 * If 'a' is 0, throw an Error with the message "Zero Error"
 * If 'a' is negative, throw an Error with the message "Negative Error"
 */
function isPositive(a) {
    
}


function main() {
    const n = +(readLine());
    
    for (let i = 0; i < n; i++) {
        const a = +(readLine());
      
        try {
            console.log(isPositive(a));
        } catch (e) {
            console.log(e.message);
        }
    }
}




SOLUTION


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the isPositive function.
 * If 'a' is positive, return "YES".
 * If 'a' is 0, throw an Error with the message "Zero Error"
 * If 'a' is negative, throw an Error with the message "Negative Error"
 */
function isPositive(a) {
 if (a > 0) {
        return 'YES';
    } else if (a === 0) {
        throw new Error('Zero Error');
    } else {
        throw new Error('Negative Error');
    }
}


function main() {
    const n = +(readLine());
    
    for (let i = 0; i < n; i++) {
        const a = +(readLine());
      
        try {
            console.log(isPositive(a));
        } catch (e) {
            console.log(e.message);
        }
    }
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0

Sample Test case 1

Sample Test case 2
Input (stdin)
3
1
2
3
Your Output (stdout)
YES
YES
YES
Expected Output

YES
YES
YES

***********************************************************

Day 5: Inheritance


Objective

In this challenge, we practice implementing inheritance and use JavaScript prototypes to add a new method to an existing prototype. Check out the attached Classes tutorial to refresh what we've learned about these topics.

Task

We provide the implementation for a Rectangle class in the editor. Perform the following tasks:

Add an area method to Rectangle's prototype.
Create a Square class that satisfies the following:
It is a subclass of Rectangle.
It contains a constructor and no other methods.
It can use the Rectangle class' area method to print the area of a Square object.
Locked code in the editor tests the class and method implementations and prints the area values to STDOUT.



GIVEN CODE

class Rectangle {
    constructor(w, h) {
        this.w = w;
        this.h = h;
    }
}

/*
 *  Write code that adds an 'area' method to the Rectangle class' prototype
 */

/*
 * Create a Square class that inherits from Rectangle and implement its class constructor
 */

if (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {
    const rec = new Rectangle(3, 4);
    const sqr = new Square(3);
    
    console.log(rec.area());
    console.log(sqr.area());
} else {
    console.log(-1);
    console.log(-1);
}


SOLUTION 


class Rectangle {
    constructor(w, h) {
        this.w = w;
        this.h = h;
    }
}

// Adding 'area' method to Rectangle class's prototype
Rectangle.prototype.area = function() {
    return this.w * this.h;
};

// Create a Square class that inherits from Rectangle
class Square extends Rectangle {
    constructor(s) {
        super(s, s); // Call the constructor of the superclass (Rectangle) with side 's'
    }
}

// Test the class and method implementations


if (JSON.stringify(Object.getOwnPropertyNames(Square.prototype)) === JSON.stringify([ 'constructor' ])) {
    const rec = new Rectangle(3, 4);
    const sqr = new Square(3);
    
    console.log(rec.area());
    console.log(sqr.area());
} else {
    console.log(-1);
    console.log(-1);
}

Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Your Output (stdout)
12
9
Expected Output
12
9

*************************************************************

Day 8: Create a Button


Objective

In this challenge, we practice creating buttons in JavaScript. Check out the attached tutorial for learning materials.

Task

Complete the code in the editor so that it creates a clickable button satisfying the following properties:

The button's id is btn.
The button's initial text label is 0. After each click, the button must increment by 1. Recall that the button's text label is the JS object's innerHTML property.
The button has the following style properties:
A width of 96px.
A height of 48px.
The font-size attribute is 24px.


The .js and .css files are in different directories, so use the link tag to provide the CSS file path and the script tag to provide the JS file path:

<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="css/button.css" type="text/css">
    </head>
    
    <body>
    	<script src="js/button.js" type="text/javascript"></script>
    </body>
</html>
Submissions

This is a new style of challenge involving Front-End rendering. It may take up to  seconds to see the result of your code, so please be patient after clicking Submit. The Submissions page contains screenshots to help you gauge how well you did.

Ask questions in the Discussions forum and submit any bug reports to support@hackerrank.com. Enjoy!

Explanation

Initially, the button looks like this:

0
After the first  clicks, it looks like this:

4

After  more clicks, it looks like this:

9


SOLUTION

Certainly! You need to create a button with the specified properties using HTML, CSS, and JavaScript. Here's how you can do it:



Create the HTML file (index.html):
html

Copy code
<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" href="css/button.css" type="text/css">
</head>

<body>
    <button id="btn">0</button>
    <script src="js/button.js" type="text/javascript"></script>
</body>

</html>



Create the CSS file (css/button.css):
css

Copy code

#btn {
    width: 96px;
    height: 48px;
    font-size: 24px;
}


Create the JavaScript file (js/button.js):
javascript


Copy code


// Get the button element
const button = document.getElementById('btn');

// Initialize the click count
let clickCount = 0;

// Add a click event listener to the button
button.addEventListener('click', function () {
    // Increment the click count
    clickCount++;

    // Update the button's text with the current click count
    button.innerHTML = clickCount;
});



Now, when you open the index.html file in a web browser, you should see a button with the specified properties. Each time you click the button, the click count will increment, and the button's text will be updated accordingly.


Status: Document prepared successfully.



***********************************************************

Day 1: Arithmetic Operators


Objective

In this challenge, we practice using arithmetic operators. Check out the attached tutorial for resources.

Task

Complete the following functions in the editor below:

1. getArea(length, width): Calculate and return the area of a rectangle having sides lenght  and width.
2. getPerimeter(length, width): Calculate and return the perimeter of a rectangle having sides lenght and width.
The values returned by these functions are printed to stdout by locked stub code in the editor.

Input Format

getArea

Data Type: Number, Parameter: length, Description: A number denoting the length of a rectangle.
Data Type: Number, Parameter: height, Description: A number denoting the height of a rectangle.
getPerimeter(length, height)

Data Type: Number, Parameter: length, Description: A number denoting the length of a rectangle.
Data Type: Number, Parameter: height, Description: A number denoting the height of a rectangle.



Constraints

1<= lenght, width <= 1000

lenght and width are scaled to at most three decimal places.



Output Format
Function: getArea, Return Type: Number, Description: The area of a rectangle having sides length and width. Function: getPerimeter, Return Type: Number, Description: The perimeter of a rectangle having sides length and width.

Sample Input 0

3
4.5
Sample Output 0

13.5
15
Explanation 0

The area of the rectangle is lenght x width = 3 x 4.5 = 13.52.
The perimeter of the rectangle is 2 * (lenght + width)= 2 * (3 + 4.5) = 15.





GIVEN CODE


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   Calculate the area of a rectangle.
*
*   length: The length of the rectangle.
*   width: The width of the rectangle.
*   
*	Return a number denoting the rectangle's area.
**/
function getArea(length, width) {
    let area;
    // Write your code here
    
    return area;
}


/**
*   Calculate the perimeter of a rectangle.
*	
*	length: The length of the rectangle.
*   width: The width of the rectangle.
*   
*	Return a number denoting the perimeter of a rectangle.
**/
function getPerimeter(length, width) {
    let perimeter;
    // Write your code here
    
    return perimeter;
}

function main() {
    const length = +(readLine());
    const width = +(readLine());
    
    console.log(getArea(length, width));
    console.log(getPerimeter(length, width));
}



SOLUTION 


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   Calculate the area of a rectangle.
*
*   length: The length of the rectangle.
*   width: The width of the rectangle.
*   
*	Return a number denoting the rectangle's area.
**/
function getArea(length, width) {
    let area;
    // Write your code here
        area = length * width;
    return area;
}

/**
*   Calculate the area of a rectangle.
*
*   length: The length of the rectangle.
*   width: The width of the rectangle.
*   
*	Return a number denoting the rectangle's area.
**/
function getArea(length, width) {
    let area;
    // Write your code here
        area = length * width;
    return area;
}

/**
*   Calculate the perimeter of a rectangle.
*	
*	length: The length of the rectangle.
*   width: The width of the rectangle.
*   
*	Return a number denoting the perimeter of a rectangle.
**/
function getPerimeter(length, width) {
    let perimeter;
    // Write your code here
        perimeter = 2 * (length + width);
    return perimeter;
}


function main() {
    const length = +(readLine());
    const width = +(readLine());
    
    console.log(getArea(length, width));
    console.log(getPerimeter(length, width));
}


Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
3
4.5
Your Output (stdout)
13.5
15
Expected Output
13.5
15

***************************************************************

Day 8: Buttons Container

Objective

In this challenge, we lay out buttons inside a div and modify their labels after each click event on one of the buttons. Check out the attached tutorial for learning materials.

Task
We want to create nine buttons enclosed in a div, laid out so they form a 3 x 3 grid. Each button has a distinct label from 1 to 9 , and the labels on the outer buttons must rotate in the clockwise direction each time we click the middle button.

Complete the code in the editor so that it satisfies the following criteria:

Initial State. The initial layout looks like this:


The task is to create nine buttons enclosed in a div, laid out so they form a 3 x 3 grid. Each time we click the middle button, the labels on the outer buttons rotate in a clockwise direction. The initial layout looks like this:


Element IDs. Each element in the document must have an id, specified below:

The button container div's id must be btns.
The initial innerHTML labels must have the following button ids:

The table with two columns: “innerHTML” and “id”. The rows are numbered 1 through 9. The cells in the first column are empty. The cells in the second column contain the text “btn1” through “btn9”. Here is the information in a copy-paste friendly format:

innerHTML, id 1, btn1 2, btn2 3, btn3 4, btn4 5, btn5 6, btn6 7, btn7 8, btn8 9, btn9

Styling. The document's elements must have the following styles:
The width of btns is 75%, relative to the document body's width.
Each button (i.e., btn1 through btn9) satisfies the following:
The width is 30%, relative to its container width.
The height is 48px.
The font-size is 24px.


Behavior. Each time btn5 is clicked, the innerHTML text on the grid's outer buttons (i.e., bt1, btn2, btn3, btn4, btn6, btn7, btn8, btn9) must rotate in the clockwise direction. Do not update the button id's.
The .js and .css files are in different directories, so use the link tag to provide the CSS file path and the script tag to provide the JS file path:

<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="css/buttonsGrid.css" type="text/css">
    </head>
    
    <body>
    	<script src="js/buttonsGrid.js" type="text/javascript"></script>
    </body>
</html>
Explanation

Initially, the buttons look like this:



Explanation

Initial State: The buttons are arranged in a 3x3 grid with numbers from 1 to 9 in ascending order from left to right, top to bottom.

1 2 3
4 5 6
7 8 9

After 1 Click: After clicking btn5 once, the numbers rotate clockwise with 5 at the center.

4 1 2
7 5 3
9 6 8

After 2 Clicks: After clicking btn5 once more (for a total of 2 clicks), the numbers rotate clockwise again with 5 at the center.

7 4 1
9 5 2
6 3 8

In each state, the numbers rotate as if they were on the face of a clock with 5 at the center. The rotation is clockwise. After two clicks, each number has moved two positions in the clockwise direction. For example, 1 which was initially at the top left corner, moves to the top center after one click and to the top right after two clicks. Similarly, 8 which was initially at the bottom center, moves to the middle left after one click and to the top left after two clicks. The 5 at the center remains stationary.

SOLUTION

HTML structure for this challenge. Save it in a file named buttonsGrid.html.

html

Copy code

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/buttonsGrid.css" type="text/css">
    <title>Buttons Grid</title>
</head>

<body>
    <div id="btns">
        <button id="btn1" onclick="rotateButtons()">1</button>
        <button id="btn2" onclick="rotateButtons()">2</button>
        <button id="btn3" onclick="rotateButtons()">3</button>
        <br>
        <button id="btn4" onclick="rotateButtons()">4</button>
        <button id="btn5" onclick="rotateButtons()">5</button>
        <button id="btn6" onclick="rotateButtons()">6</button>
        <br>
        <button id="btn7" onclick="rotateButtons()">7</button>
        <button id="btn8" onclick="rotateButtons()">8</button>
        <button id="btn9" onclick="rotateButtons()">9</button>
    </div>

    <script src="js/buttonsGrid.js" type="text/javascript"></script>
</body>

</html>



create two separate files: one for the CSS (buttonsGrid.css) and one for the JavaScript (buttonsGrid.js). Also, make sure to include the given HTML structure in the project.

buttonsGrid.css:

css

Copy code

/* Add your CSS styles here */
#btns {
    width: 75%;
}

button {
    width: 30%;
    height: 48px;
    font-size: 24px;
}
buttonsGrid.js:




javascript

Copy code

// Add your JavaScript code here
document.addEventListener('DOMContentLoaded', function () {
    const btn5 = document.getElementById('btn5');

    btn5.addEventListener('click', function () {
        rotateButtons();
    });
});

function rotateButtons() {
    const btns = document.getElementById('btns');
    const buttons = btns.getElementsByTagName('button');
    
    const labels = [];
    for (let i = 0; i < buttons.length; i++) {
        labels.push(buttons[i].innerHTML);
    }

    // Rotate labels clockwise
    const rotatedLabels = [
        labels[6], labels[3], labels[0],
        labels[7], labels[4], labels[1],
        labels[8], labels[5], labels[2]
    ];

    // Update button labels
    for (let i = 0; i < buttons.length; i++) {
        buttons[i].innerHTML = rotatedLabels[i];
    }
}




Status: Document prepared successfully.


ACCEPTED

****************************************************************************


Day 1: Functions



Objective

Today, we're discussing JavaScript functions. Check out the attached tutorial for more details.

Task

Implement a function named factorial that has one parameter: an integer,n . It must return the value of n! (i.e.,n  factorial).

Input Format

Locked stub code in the editor reads a single integer,n , from stdin and passes it to a function named factorial.

Constraints

1<= n <= 10


Output Format

The function must return the value of n!.

Sample Input 0

4
Sample Output 0

24
Explanation 0

We return the value of 4! = 4 x 3 x 2 x 1 = 24 .




GIVEN CODE


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}
/*


/*
 * Create the function factorial here
 */


function main() {
    const n = +(readLine());
    
    console.log(factorial(n));
}

SOLUTION


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}
/*
 * Create the function factorial here
 */
function factorial(n) {
    if (n === 0 || n === 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

function main() {
    const n = +(readLine());
    
    console.log(factorial(n));
}

Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
4
Your Output (stdout)
24
Expected Output
24


******************************************************************
Day 9: Binary Calculator


Objective

In this challenge, we implement a calculator that uses binary numbers. Check out the attached tutorial for learning materials.

Task

Implement a simple calculator that performs the following operations on binary numbers: addition, subtraction, multiplication, and division. Note that division operation must be integer division only; for example,1001/100 = 10 ,1110/101 = 10 , and 101/1 = 101.

The calculator's initial state must look like this:


There is a gray rectangular screen at the top.
Below the screen, there are four green buttons in a row. The buttons are labeled “0”, “1”, “C”, and “=”.
Below the green buttons, there are four red buttons in a row. The buttons are labeled “+”, “-”, “*”, and “/”.
This layout allows for binary input, clearing the input, performing the calculation, and executing the four basic arithmetic operations. 


innerHTML	id	Description/Behavior
res	Contains the result of button presses.
btns	A button container that displays all eight calculator buttons.
0	btn0	A button expressing binary digit .
1	btn1	A button expressing binary digit .
C	btnClr	A button to clear the contents of .
=	btnEql	A button to evaluate the contents of the expression in .
+	btnSum	A button for the addition operation.
-	btnSub	A button for the subtraction operation.
*	btnMul	A button for the multiplication operation.
/	btnDiv	A button for the integer division operation.


Styling. The document's elements must have the following styles:

body has a width of 33%.
res has a background-color of lightgray, a border that is solid, a height of 48px, and a font-size of 20px.
btn0 and btn1 have a background-color of lightgreen and a color of brown.
btnClr and btnEql have a background-color of darkgreen and a color of white.
btnSum, btnSub, btnMul, and btnDiv have a background-color of black, a color of red.
All the buttons in btns have a width of 25%, a height of 36px, a font-size of 18px, margin of 0px, and float value left.
The .js and .css files are in different directories, so use the link tag to provide the CSS file path and the script tag to provide the JS file path:


<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="css/binaryCalculator.css" type="text/css">
    </head>
    
    <body>
    	<script src="js/binaryCalculator.js" type="text/javascript"></script>
    </body>
</html>
Constraints

All expressions in the test dataset are entered in the form

operand1->operator->operand2, where operand1  is the first binary number,operand2  is the second binary number, and operator is in the set {+, -, *, =}.
Both operands will always be positive integers when converted from base-2 to base-10.
All expressions will be valid.


Explanation

Consider the following sequence of button clicks:

1->1->0->1->1->+->1->0->0->0->=

Before pressing the = button, the result div looks like this:


11011+1000


After pressing the = button to evaluate our expression, the result div looks like this:

100011

Notice that (11011)base 2 = (27) base 10,(1000)base 2 = (8)base 10 , and(100011)base 2 = (35)base 10 , so our calculator evaluated the expression correctly.

Now, let's consider our next sequence of button clicks as:

0->1->*->1->1->1->=

Before pressing the = button, the result div looks like this:

10001101*111

After pressing the = button to evaluate our expression, the result div looks like this:

1111011011

Consider the next sequence of button clicks as:

C->1->1

The result div looks like this:
11


SOLUTION 


HTML 



<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" href="css/binaryCalculator.css" type="text/css">
    </head>
    <body>
        <div id="res"></div>
        <div id="btns">
            <button id="btn0">0</button>
            <button id="btn1">1</button>
            <button id="btnClr">C</button>
            <button id="btnEql">=</button>
            <button id="btnSum">+</button>
            <button id="btnSub">-</button>
            <button id="btnMul">*</button>
            <button id="btnDiv">/</button>
        </div>
        <script src="js/binaryCalculator.js" type="text/javascript"></script>
    </body>
</html>







CSS (binaryCalculator.css):

body {
    width: 33%;
}
#res {
    background-color: lightgray;
    border: solid;
    height: 48px;
    font-size: 20px;
}
#btn0, #btn1 {
    background-color: lightgreen;
    color: brown;
}
#btnClr, #btnEql {
    background-color: darkgreen;
    color: white;
}
#btnSum, #btnSub, #btnMul, #btnDiv {
    background-color: black;
    color: red;
}
#btns button {
    width: 25%;
    height: 36px;
    font-size: 18px;
    margin: 0px;
    float: left;
}






JavaScript (binaryCalculator.js):




document.getElementById("btn0").onclick = function() {document.getElementById("res").innerHTML += "0";};
document.getElementById("btn1").onclick = function() {document.getElementById("res").innerHTML += "1";};
document.getElementById("btnClr").onclick = function() {document.getElementById("res").innerHTML = "";};
document.getElementById("btnEql").onclick = function() {
    let re = /^(\d+)([-+*\/])(\d+)$/;
    let match = re.exec(document.getElementById("res").innerHTML);
    document.getElementById("res").innerHTML = Math.floor(eval(parseInt(match[1], 2) + match[2] + parseInt(match[3], 2))).toString(2);
};
document.getElementById("btnSum").onclick = function() {document.getElementById("res").innerHTML += "+";};
document.getElementById("btnSub").onclick = function() {document.getElementById("res").innerHTML += "-";};
document.getElementById("btnMul").onclick = function() {document.getElementById("res").innerHTML += "*";};
document.getElementById("btnDiv").onclick = function() {document.getElementById("res").innerHTML += "/";};







Status: Document prepared successfully.




ACCEPTED


************************************************************************



Day 7: Regular Expressions II

Task

Complete the function in the editor below by returning a RegExp object,re , that matches any string s satisfying both of the following conditions:

String s starts with the prefix Mr., Mrs., Ms., Dr., or Er.
The remainder of string s (i.e., the rest of the string after the prefix) consists of one or more upper and/or lowercase English alphabetic letters (i.e., [a-z] and [A-Z]).
Constraints

The length of string s is >=3 .

Output Format

The function must return a RegExp object that matches any string  satisfying both of the given conditions.

Sample Input 0

Mr.X
Sample Output 0

true
Explanation 0

This string starts with Mr., followed by an English alphabetic letter (X).

Sample Input 1

Mrs.Y
Sample Output 1

true
Explanation 1

This string starts with Mrs., followed by an English alphabetic letter (Y).

Sample Input 2

Dr#Joseph
Sample Output 2

false
Explanation 2

This string starts with Dr# instead of Dr., so it's invalid.

Sample Input 3

Er .Abc
Sample Output 3

false
Explanation 3

This string starts with Er but there is a space before the period (.), making the string invalid.


GIVEN CODE 

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function regexVar() {
    /*
     * Declare a RegExp object variable named 're'
     * It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.', 
     * followed by one or more letters.
     */
    
    
    /*
     * Do not remove the return statement
     */
    return re;
}


function main() {
    const re = regexVar();
    const s = readLine();
    
    console.log(!!s.match(re));
}



SOLUTION 

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function regexVar() {
    /*
     * Declare a RegExp object variable named 're'
     * It must match a string that starts with 'Mr.', 'Mrs.', 'Ms.', 'Dr.', or 'Er.', 
     * followed by one or more letters.
     */
    
    const re = /^(Mr\.|Mrs\.|Ms\.|Dr\.|Er\.)[a-zA-Z]+$/;
    /*
     * Do not remove the return statement
     */
    return re;
}


function main() {
    const re = regexVar();
    const s = readLine();
    
    console.log(!!s.match(re));
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0

Sample Test case 1

Sample Test case 2

Sample Test case 3
Input (stdin)
Mr.X
Your Output (stdout)
true
Expected Output
true


****************************************************************

Day 2: Conditional Statements: If-Else



Objective

In this challenge, we learn about if-else statements. Check out the attached tutorial for more details.

Task

Complete the getGrade(score) function in the editor. It has one parameter: an integer,score , denoting the number of points Julia earned on an exam. It must return the letter corresponding to her grade according to the following rules:

If 25<score<= 30, then grade = A 
If 2<score<= 25, then grade = B 
If 15<score<= 20, then grade = C 
If 10<score<= 15, then grade = D 
If 5<score<= 10, then grade = E 
If 0<score<= 5, then grade = F 

Input Format

Stub code in the editor reads a single integer denoting score from stdin and passes it to the function.

Constraints

0<=score<=30

Output Format

The function must return the value of grade (i.e., the letter grade) that Julia earned on the exam.

Sample Input 0

11
Sample Output 0

D
Explanation 0

Because score = 11, it satisfies the condition 10 <score<=15 (which corresponds to D). Thus, we return D as our answer


GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function getGrade(score) {
    let grade;
    // Write your code here
    
    return grade;
}


function main() {
    const score = +(readLine());
    
    console.log(getGrade(score));
}



SOLUTION 

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function getGrade(score) {
    let grade;
    // Write your code here
    
    if (score > 25 && score <= 30) {
        grade = 'A';
    } else if (score > 20 && score <= 25) {
        grade = 'B';
    } else if (score > 15 && score <= 20) {
        grade = 'C';
    } else if (score > 10 && score <= 15) {
        grade = 'D';
    } else if (score > 5 && score <= 10) {
        grade = 'E';
    } else if (score > 0 && score <= 5) {
        grade = 'F';
    } else {
        grade = 'Invalid score';
    }
    
    return grade;
}
function main() {
    const score = +(readLine());
    
    console.log(getGrade(score));
}


Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
11
Your Output (stdout)
D
Expected Output
D

******************************************************************


Day 1: Let and Const



Objective

In this challenge, we practice declaring variables using the let and const keywords. Check out the attached tutorial for more details.

Task

1. Declare a constant variable,PI , and assign it the value Math.PI. You will not pass this challenge unless the variable is declared as a constant and named PI (uppercase).
2. Read a number,r , denoting the radius of a circle from stdin.
3. Use PI and r to calculate the area and perimeter of a circle having radius r.
4. Print area as the first line of output and print perimeter as the second line of output.
Input Format

A single integer, , denoting the radius of a circle.

Constraints

0<r<=100

 r is a floating-point number scaled to at most 3 decimal places.


Output Format

Print the following two lines:

1. On the first line, print the area of the circle having radius .
2. On the second line, print the perimeter of the circle having radius r.

Sample Input 0

2.6

Sample Output 0

21.237166338267002
16.336281798666924

Explanation 0

Given the radiusr = 2.6 , we calculate the following:

area = PI * r to the power of 2 = 21.237166338267002
perimeter = 2 * PI *r = 16.336281798666924

We then print area as our first line of output and perimeter as our second line of output.



GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function main() {
    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.
    
    // Print the area of the circle:
    
    // Print the perimeter of the circle:

 try {    
        // Attempt to redefine the value of constant variable PI
        PI = 0;
        // Attempt to print the value of PI
        console.log(PI);
    } catch(error) {
        console.error("You correctly declared 'PI' as a constant.");
    }
}



SOLUTION


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function main() {
    const radius = +(readLine());
    
    // Print the area of the circle:
    const area = Math.PI * radius * radius;
    console.log(area);
    
    // Print the perimeter of the circle:
    const perimeter = 2 * Math.PI * radius;
    console.log(perimeter);

    try {    
        // Attempt to redefine the value of constant variable PI
        PI = 0;
        // Attempt to print the value of PI
        console.log(PI);
    } catch(error) {
        console.error("You correctly declared 'PI' as a constant.");
    }
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Error (stderr)
You correctly declared 'PI' as a constant.
Input (stdin)
2.6
Your Output (stdout)
21.237166338267002
16.336281798666924
Expected Output
21.237166338267002
16.336281798666924

*************************************************************************


Day 2: Conditional Statements: Switch


Objective

In this challenge, we learn about switch statements. Check out the attached tutorial for more details.

Task

Complete the getLetter(s) function in the editor. It has one parameter: a string,s , consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria:

If the first character in string  is in the set {a, e, i, o, u}, then return A.
If the first character in string  is in the set {b, c, d, f, g}, then return B.
If the first character in string  is in the set {h, j, k, l, m} , then return C.
If the first character in string  is in the set {n, p, q, r, s, t, v, w, x, y, z}, then return D.
Hint: You can get the letter at some index i in s using the syntax s[i] or s.charAt(i).

Function Description

Complete the getLetter function in the editor below.

getLetter has the following parameters:

string s: a string
Returns

string: a single letter determined as described above

Input Format

Stub code in the editor reads a single string denoting  from stdin.

Constraints

1<=|s|<=100, where |s|is the lenght of s.


String  contains lowercase English alphabetic letters (i.e., a through z) only.
Sample Input 0

adfgt
Sample Output 0

A
Explanation 0

The first character of string s = adfgt is a. Because the given criteria stipulate that we print A any time the first character is in {a, e, i, o, u}, we return A as our answer.






GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function getLetter(s) {
    let letter;
    // Write your code here
    
    return letter;
}

function main() {
    const s = readLine();
    
    console.log(getLetter(s));
}



SOLUTION


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function getLetter(s) {
    let letter;
 // Get the first character of the string
    const firstChar = s[0];

function getLetter(s) {
    let letter;
 // Get the first character of the string
    const firstChar = s[0];

    // Use a switch statement to check the first character
    switch (firstChar) {
        case 'a':
        case 'e':
        case 'i':
        case 'o':
        case 'u':
            letter = 'A';
            break;
        case 'b':
        case 'c':
        case 'd':
        case 'f':
        case 'g':
            letter = 'B';
            break;
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
            letter = 'C';
            break;
        default:
            letter = 'D';
    }
    
    return letter;
}


function main() {
    const s = readLine();
    
    console.log(getLetter(s));
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
adfgt
Your Output (stdout)
A
Expected Output
A

********************************************************


Day 3: Arrays

Objective

In this challenge, we learn about Arrays. Check out the attached tutorial for more details.

Function Description

Complete the getSecondLargest function in the editor below.

getSecondLargest has the following parameters:

int nums[n]: an array of integers
Returns

int: the second largest number in nums
Input Format

The first line contains an integer,n , the size of the nums array.
The second line contains n space-separated numbers that describe the elements in nums.

Constraints

1<=n<=10
0<=nums, <=100, where nums is the number at index i.
The numbers in nums may not be distinct.
Sample Input 0

5
2 3 6 6 5
Sample Output 0

5
Explanation 0

Given the array nums = [2, 3, 6, 6, 5], we see that the largest value in the array is 6 and the second largest value is 5. Thus, we return 5 as our answer.



GIVEN CODE 

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
*   Return the second largest number in the array.
*   @param {Number[]} nums - An array of numbers.
*   @return {Number} The second largest number in the array.
**/
function getSecondLargest(nums) {
    // Complete the function
}

function main() {
    const n = +(readLine());
    const nums = readLine().split(' ').map(Number);
    
    console.log(getSecondLargest(nums));
}




SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/**
* Return the second largest number in the array.
 * @param {Number[]} nums - An array of numbers.
 * @return {Number} The second largest number in the array.
**/
function getSecondLargest(nums) {
    // Step 1: Sort the array in descending order
    nums.sort(function(a, b) {
        return b - a;
    });

    // Step 2: Iterate through the sorted array to find the second largest
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] < nums[0]) {
            return nums[i];
        }
    }

    // If all elements are the same, return the first element
    return nums[0];
}

function main() {
    const n = +(readLine());
    const nums = readLine().split(' ').map(Number);
    
    console.log(getSecondLargest(nums));
}





Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
5
2 3 6 6 5
Your Output (stdout)
5
Expected Output
5

*****************************************************************************************



Day 4: Create a Rectangle Object



Objective

In this challenge, we practice creating objects. Check out the attached tutorial for more details.

Task

Complete the function in the editor. It has two parameters: a and b. It must return an object modeling a rectangle that has the following properties:

lenght: This value is equal to a.
width: This value is equal to b.
perimeter: This value is equal to2 * (a+b) 
area: This value is equal to a*b


Note: The names of the object's properties must be spelled correctly to pass this challenge.

Input Format

The first line contains an integer denoting a.
The second line contains an integer denoting b.

Constraints

1<=a, b<=100

Output Format

Return a object that has the properties specified above. Locked code in the editor prints the returned object's lenght, width, perimeter, and area to STDOUT.

Sample Input 0

4
5
Sample Output 0

4
5
18
20
Explanation 0

Given a lenght of a = 4  and a width of b = 5 , the Rectangle object's perimeters is  4+4+5+5=18 and its area is 4*5=20.


GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the Rectangle function
 */
function Rectangle(a, b) {
    
}


function main() {
    const a = +(readLine());
    const b = +(readLine());
    
    const rec = new Rectangle(a, b);
    
    console.log(rec.length);
    console.log(rec.width);
    console.log(rec.perimeter);
    console.log(rec.area);
}



SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Complete the Rectangle function
 */
function Rectangle(a, b) {
    return {
        length: a,
        width: b,
        perimeter: 2 * (a + b),
        area: a * b,
    };
}


function main() {
    const a = +(readLine());
    const b = +(readLine());
    
    const rec = new Rectangle(a, b);
    
    console.log(rec.length);
    console.log(rec.width);
    console.log(rec.perimeter);
    console.log(rec.area);
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
4
5
Your Output (stdout)
4
5
18
20
Expected Output
4

5
18
20

***************************************************************************

Day 7: Regular Expressions III


Task

Complete the function in the editor below by returning a RegExp object,re , that matches every integer in some string s.

Constraints

The length of string s is >=3 .
It's guaranteed that string s contains at least one integer.
Output Format

The function must return a RegExp object that matches every integer in some string .

Sample Input 0

102, 1948948 and 1.3 and 4.5



Sample Output 0

102
1948948
1
3
4
5
Explanation 0

When we call match on string s and pass the correct RegExp as our argument, it returns the following array of results: [ '102', '1948948', '1', '3', '4', '5' ].

Sample Input 1

1 2 3
Sample Output 1

1
2
3
Explanation 1

When we call match on string s and pass the correct RegExp as our argument, it returns the following array of results: [ '1', '2', '3' ].



GIVEN CODE



'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function regexVar() {
    /*
     * Declare a RegExp object variable named 're'
     * It must match ALL occurrences of numbers in a string.
     */
    
    
    /*
     * Do not remove the return statement
     */
    return re;
}
function main() {
    const re = regexVar();
    const s = readLine();
    
    const r = s.match(re);
    
    for (const e of r) {
        console.log(e);
    }
}



SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

function regexVar() {
    /*
     * Declare a RegExp object variable named 're'
     * It must match ALL occurrences of numbers in a string.
     */
    
    const re = /\d+/g; // This regular expression matches all occurrences of one or more digits 
    /*
     * Do not remove the return statement
     */
    return re;
}

function main() {
    const re = regexVar();
    const s = readLine();
    
    const r = s.match(re);
    
    for (const e of r) {
        console.log(e);
    }
}




Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0

Sample Test case 1
Input (stdin)
102, 1948948 and 1.3 and 4.5
Your Output (stdout)
102
1948948
1
3
4
5


Expected Output
102
1948948
1
3
4
5

*****************************************************


Day 4: Count Objects



Objective

In this challenge, we learn about iterating over objects. Check the attached tutorial for more details.

Task

Complete the function in the editor. It has one parameter: an array,a , of objects. Each object in the array has two integer properties denoted by x and y. The function must return a count of all such objects o in array a that satisfy 0. x == 0. y.

Input Format

The first line contains an integer denoting n.
Each of the n subsequent lines contains two space-separated integers describing the values of x and y.

Constraints

5<=n<=10
1<=x, y<=100

Output Format

Return a count of the total number of objects 0 such that 0. x = = 0. y. Locked stub code in the editor prints the returned value to STDOUT.

Sample Input 0

5
1 1
2 3
3 3
3 4
4 5
Sample Output 0

2
Explanation 0

There are n = 5  objects in the objects array:

objects0 = {x:1, y:1}
objects1 = {x:2, y:3}
objects2 = {x:3, y:3}
objects3 = {x:3, y:4}
objects4 = {x:4, y:5}

Because we have two objects 0 that satisfy 0.x == 0.y (i.e., objects0 and object2), we return 2 as our answer.


GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Return a count of the total number of objects 'o' satisfying o.x == o.y.
 * 
 * Parameter(s):
 * objects: an array of objects with integer properties 'x' and 'y'
 */
function getCount(objects) {

/*
 * Return a count of the total number of objects 'o' satisfying o.x == o.y.
 * 
 * Parameter(s):
 * objects: an array of objects with integer properties 'x' and 'y'
 */
function getCount(objects) {
    
}


function main() {
    const n = +(readLine());
    let objects = [];
    
    for (let i = 0; i < n; i++) {
        const [a, b] = readLine().split(' ');
        
        objects.push({x: +(a), y: +(b)});
    }
    
    console.log(getCount(objects));
}




SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Return a count of the total number of objects 'o' satisfying o.x == o.y.
 * 
 * Parameter(s):
 * objects: an array of objects with integer properties 'x' and 'y'
 */
function getCount(objects) {
    let count = 0;

    for (let obj of objects) {
        if (obj.x === obj.y) {
            count++;
        }
    }

    return count;

}


function main() {
    const n = +(readLine());
    let objects = [];
    
    for (let i = 0; i < n; i++) {
        const [a, b] = readLine().split(' ');
        
        objects.push({x: +(a), y: +(b)});
    }
    
    console.log(getCount(objects));
}





Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
5
1 1
2 3
3 3
3 4
4 5
Your Output (stdout)
2
Expected Output
2


*******************************************************************


Day 4: Classes


Objective

In this challenge, we practice using JavaScript classes. Check the attached tutorial for more details.

Task

Create a Polygon class that has the following properties:

A constructor that takes an array of integer values describing the lengths of the polygon's sides.
A perimeter() method that returns the polygon's perimeter.
Locked code in the editor tests the Polygon constructor and the perimeter method.

Note: The perimeter method must be lowercase and spelled correctly.

Input Format

There is no input for this challenge.

Output Format

The perimeter method must return the polygon's perimeter using the side length array passed to the constructor.

Explanation

Consider the following code:

// Create a polygon with side lengths 3, 4, and 5
let triangle = new Polygon([3, 4, 5]);

// Print the perimeter
console.log(triangle.perimeter());
When executed with a properly implemented Polygon class, this code should print the result of 3+4+5=12.


GIVEN CODE

/*
 * Implement a Polygon class with the following properties:
 * 1. A constructor that takes an array of integer side lengths.
 * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.
 */


const rectangle = new Polygon([10, 20, 10, 20]);
const square = new Polygon([10, 10, 10, 10]);
const pentagon = new Polygon([10, 20, 30, 40, 43]);

console.log(rectangle.perimeter());
console.log(square.perimeter());
console.log(pentagon.perimeter());




SOLUTION


/*
 * Implement a Polygon class with the following properties:
 * 1. A constructor that takes an array of integer side lengths.
 * 2. A 'perimeter' method that returns the sum of the Polygon's side lengths.
 */
class Polygon {
    constructor(sides) {
        this.sides = sides;
    }

    perimeter() {
        return this.sides.reduce((sum, side) => sum + side, 0);
    }
}

const rectangle = new Polygon([10, 20, 10, 20]);
const square = new Polygon([10, 10, 10, 10]);
const pentagon = new Polygon([10, 20, 30, 40, 43]);

console.log(rectangle.perimeter());
console.log(square.perimeter());
console.log(pentagon.perimeter());




Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Your Output (stdout)
60
40
143
Expected Output
60
40
143

***************************************************************



Day 5: Template Literals


Objective

In this challenge, we practice using JavaScript Template Literals. Check the attached tutorial for more details.

Task

The code in the editor has a tagged template literal that passes the area and perimeter of a rectangle to a tag function named sides. Recall that the first argument of a tag function is an array of string literals from the template, and the subsequent values are the template's respective expression values.

Complete the function in the editor so that it does the following:

1. Finds the initial values of s1 and s2 by plugging the area and perimeter values into the formula:


The equation is as follows:
P1​=P2​​−416⋅A​
This equation seems to be solving for the variable P1​
, which is equal to the square root of P2​
 minus the result of multiplying 16 by A
 and then dividing by 4. 


where A is the rectangle's area and P is its perimeter.
2. Creates an array consisting of s1 and s2 and sorts it in ascending order.
3. Returns the sorted array.
Input Format

The first line contains an integer denoting s1.
The second line contains an integer denoting s2.

Constraints

1<=s1,s2<=100

Output Format

Return an array consisting of s1 and s2, sorted in ascending order.

Sample Input 0

10
14
Sample Output 0

10
14
Explanation 0

The locked code in the editor passes the following arrays to the tag function:

The value of literals is [ 'The area is: ', '.\nThe perimeter is: ', '.' ].
The value of  expresions is [ 140, 48 ], where the first value denotes the rectangle's area,A , and the second value denotes its perimeter,P .
When we plug those values into our formula, we get the following:

The equation appears to be solving for two variables, s1​
 and s2​
, using the quadratic formula. Here’s the equation:
For s1​
:
s1​=4P1​+P2​−16⋅A​​=448+482−16⋅140​​
For s2​
:
s2​=4P1​−P2​−16⋅A​​=448−482−16⋅140​​

This equation is a form of the quadratic formula, which is used to find the roots of a quadratic equation

The square root operation in the equation only considers the positive root. If the context requires considering both positive and negative roots, the equation might need to be adjusted accordingly.

We then store these values in an array, [14, 10], sort the array, and return the sorted array, [10, 14], as our answer.



SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Determine the original side lengths and return an array:
 * - The first element is the length of the shorter side
 * - The second element is the length of the longer side
 * 
 * Parameter(s):
 * literals: The tagged template literal's array of strings.
 * expressions: The tagged template literal's array of expression values (i.e., [area, perimeter]).
 */

function sides(literals, ...expressions) {
    const [a, p] = expressions;
    
    // Calculate s1 and s2 using the quadratic formula
    const s1 = (p + Math.sqrt(p ** 2 - 16 * a)) / 4;
    const s2 = (p - Math.sqrt(p ** 2 - 16 * a)) / 4;

    // Create an array consisting of s1 and s2 and sort it in ascending order
    const resultArray = [s1, s2].sort((a, b) => a - b);

    return resultArray;
    
}


function main() {
    let s1 = +(readLine());
    let s2 = +(readLine());
    
    [s1, s2] = [s1, s2].sort();
    
    const [x, y] = sides`The area is: ${s1 * s2}.\nThe perimeter is: ${2 * (s1 + s2)}.`;
    
    console.log((s1 === x) ? s1 : -1);
    console.log((s2 === y) ? s2 : -1);
}




Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
10
14
Your Output (stdout)
10
14
Expected Output
10
14



**********************************************************


Day 5: Arrow Functions


Objective

In this challenge, we practice using arrow functions. Check the attached tutorial for more details.

Task

Complete the function in the editor. It has one parameter: an array,nums . It must iterate through the array performing one of the following actions on each element:

If the element is even, multiply the element by 2.
If the element is odd, multiply the element by 3.


The function must then return the modified array.

Input Format

The first line contains an integer,n , denoting the size of nums.
The second line contains n space-separated integers describing the respective elements of nums.

Constraints

1<=n<=10
1<=nums, <=100, where nums is the i-th element of nums.
Output Format


Return the modified array where every even element is doubled and every odd element is tripled.

Sample Input 0

5
1 2 3 4 5
Sample Output 0

3 4 9 8 15
Explanation 0

Givennums = [1, 2, 3, 4, 5] , we modify each element so that all even elements are multiplied by 2 and all odd elements are multipled by 3. In other words, [1, 2, 3, 4, 5]=>[1*3,2*2, 3*3, 4*2, 5*3]=>[3, 4, 9, 8, 15]. We then return the modified array as our answer.




GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Modify and return the array so that all even elements are doubled and all odd elements are tripled.
 * 
 * Parameter(s):
 * nums: An array of numbers.
 */
function modifyArray(nums) {

/*
 * Modify and return the array so that all even elements are doubled and all odd elements are tripled.
 * 
 * Parameter(s):
 * nums: An array of numbers.
 */
function modifyArray(nums) {
    
}


function main() {
    const n = +(readLine());
    const a = readLine().split(' ').map(Number);
    
    console.log(modifyArray(a).toString().split(',').join(' '));
}





SOLUTION


'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

/*
 * Modify and return the array so that all even elements are doubled and all odd elements are tripled.
 * 
 * Parameter(s):
 * nums: An array of numbers.
 */
function modifyArray(nums) {
    // Using arrow functions to iterate through the array and modify each element
    return nums.map(num => (num % 2 === 0) ? num * 2 : num * 3);

/*
 * Modify and return the array so that all even elements are doubled and all odd elements are tripled.
 * 
 * Parameter(s):
 * nums: An array of numbers.
 */
function modifyArray(nums) {
    // Using arrow functions to iterate through the array and modify each element
    return nums.map(num => (num % 2 === 0) ? num * 2 : num * 3);
}


function main() {
    const n = +(readLine());
    const a = readLine().split(' ').map(Number);
    
    console.log(modifyArray(a).toString().split(',').join(' '));
}




Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
5
1 2 3 4 5
Your Output (stdout)
3 4 9 8 15
Expected Output
3 4 9 8 15


*********************************************************************


Day 6: Bitwise Operators


Objective

Today, we're practicing bitwise operations. Check the attached tutorial for more details.

Task

We define S1 to be a sequence of distinct sequential integers from  to n; in other words, S={1, 2, 3, ............, n}. We want to know the maximum bitwise AND value of any two integers,a  and b (where a<b), in sequence S that is also less than a given integer, k.


Complete the function in the editor so that given n and k, it returns the maximum a&b<k.

Note: The & symbol represents the bitwise AND operator.

Input Format

The first line contains an integer, q, denoting the number of function calls.
Each of the q subsequent lines defines a dataset for a function call in the form of two space-separated integers describing the respective values of n and k.

Constraints

1<=q<=10 to the power of 3
2<=n<=10 to the power of 3
2<=k<=n
 
Output Format

Return the maximum possible value of a&b<k for any a<b in sequence S.

Sample Input 0



3
5 2
8 5
2 2
Sample Output 0

1
4
0
Explanation 0

We perform the following q=3 function calls:

1. When n=5 and k=2, we have the following possible a and b values in set :

S={1, 2, 3, 4, 5}



The table contains three columns and ten rows. The columns are labeled “a”, “b”, and “a & b”. Each row contains binary numbers in the “a” and “b” columns, and their bitwise AND operation result in the “a & b” column. Here’s the description of the table:


a	b	a & b
001	010	000
001	011	001
001	100	000
010	011	010
010	101	000
010	100	000
011	100	000
011	101	001
100	101	100
100	101	100


This table shows the result of the bitwise AND operation for different pairs of binary numbers. The bitwise AND operation takes two binary digits and returns 1 if both digits are 1, otherwise, it returns 0. For example, the bitwise AND of 001 (from column “a”) and 010 (from column “b”) is 000 (in column “a & b”), because there are no positions where both binary numbers have a 1. 




The maximum of any a&b that is also <k is 1, so we return 1.

2. When n=2 and k=2, the maximum of any a&b<k in set S={1, 2} is 0 (see table above), so we return 0.
3. When n=2 and k=2, the maximum of any a&b<k in set S={1,2} is 0 (see table above), so we return 0.
Sample Input 1

2
9 2
8 3
Sample Output 1

1
2
Explanation 1

We perform the following  function calls:

1. When n=9 and k=2, the maximum of any a&b<k in set S={1, 2, 3, 4, 5, 6, 7, 8, 9,} is 1 (see table above), so we return 1.
2. n=8When  and k=3, the maximum of any  a&b<k in set S={1, 2, 3, 4, 5, 6, 7, 8,} is 2 (see table above), so we return 2.



GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}


function main() {
    const q = +(readLine());
    
    for (let i = 0; i < q; i++) {
        const [n, k] = readLine().split(' ').map(Number);
        
        console.log(getMaxLessThanK(n, k));
    }
}





SOLUTION



'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}
function getMaxLessThanK(n, k) {
    let max = 0;
    for (let a = 1; a <= n; a++) {
        for (let b = a + 1; b <= n; b++) {
            const current = a & b;
            if (current < k && current > max) {
                max = current;
            }
        }
    }
    return max;
}



function main() {
    const q = +(readLine());
    
    for (let i = 0; i < q; i++) {
        const [n, k] = readLine().split(' ').map(Number);
        
        console.log(getMaxLessThanK(n, k));
    }
}





Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0

Sample Test case 1
Input (stdin)
3
5 2
8 5
2 2
Your Output (stdout)
1
4
0
Expected Output

1
4
0

************************************************************************
Day 6: JavaScript Dates



Objective

In this challenge, we learn about JavaScript Dates. Check out the attached tutorial for more details.

Task

Given a date string,dateString , in the format MM/DD/YYYY, find and return the day name for that date. Each day name must be one of the following strings: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, or Saturday. For example, the day name for the date 12/07/2016 is Wednesday.

Input Format

Locked stub code in the editor reads the following input from stdin:
The first line contains an integer, , denoting the number of dates to check.
Each line  of the  subsequent lines contains a date in MM/DD/YYYY format; each date denotes some dateString that is passed to the function.

Constraints

It is guaranteed that the input only consists of valid dates.
Output Format

The function must return a string denoting the day of the week corresponding to the date denoted bydateString .

Sample Input 0
2
10/11/2009
11/10/2010
Sample Output 0

Sunday
Wednesday
Explanation 0

1. The function is called for the following d=2 dates:

2. The date 11/10/2010 was a Wednesday, so we return Wednesday.





GIVEN CODE

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

// The days of the week are: "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
function getDayName(dateString) {
    let dayName;
    // Write your code here
    
    return dayName;
}


function main() {
    const d = +(readLine());
    
    for (let i = 0; i < d; i++) {
        const date = readLine();
        
        console.log(getDayName(date));
    }
}




SOLUTION

'use strict';

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.trim().split('\n').map(string => {
        return string.trim();
    });
    
    main();    
});

function readLine() {
    return inputString[currentLine++];
}

// The days of the week are: "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
function getDayName(dateString) {
    const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    
    // Create a new Date object using the dateString
    const dateObject = new Date(dateString);
    
    // Get the day of the week (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
    const dayOfWeekIndex = dateObject.getDay();
    
    // Get the day name from the daysOfWeek array
    const dayName = daysOfWeek[dayOfWeekIndex];
    
    return dayName;
}


function main() {
    const d = +(readLine());
    
    for (let i = 0; i < d; i++) {
        const date = readLine();
        
        console.log(getDayName(date));
    }
}



Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
2
10/11/2009
11/10/2010
Your Output (stdout)
Sunday
Wednesday
Expected Output
Sunday
Wednesday


*********************************************************************


















